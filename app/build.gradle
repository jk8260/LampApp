apply plugin: 'com.android.application'
apply plugin: 'realm-android'
apply from: 'stringsConfig.gradle'

android {
    signingConfigs {
        qaRelease {
            keyAlias 'lamp4'
            keyPassword 'lamp4QA'
            storeFile file('../lamp-qa.jks')
            storePassword 'LaSalleLAMP4'
        }
        productionRelease {
            keyAlias System.getenv('BITRISEIO_ANDROID_KEYSTORE_ALIAS')
            keyPassword System.getenv('BITRISEIO_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD')
            storeFile file(buildDir.absolutePath + File.separator + 'lamp.keystore')
            storePassword System.getenv('BITRISEIO_ANDROID_KEYSTORE_PASSWORD')
        }
    }
    compileSdkVersion 25
    buildToolsVersion '25.0.3'
    defaultConfig {
        applicationId "com.elasalle.lamp"
        minSdkVersion 19
        targetSdkVersion 25
        multiDexEnabled true
        resConfigs "en"
        setProperty("archivesBaseName", "lamp")
    }
    productFlavors {
        production {
            applicationId = "com.elasalle.lamp"
            buildConfigField "String", "BASE_URL", baseUrlProd
            //noinspection GroovyAssignabilityCheck
            signingConfig signingConfigs.productionRelease
        }
        qa {
            applicationId = "com.elasalle.lamp.qa"
            buildConfigField "String", "BASE_URL", baseUrlQa
            //noinspection GroovyAssignabilityCheck
            signingConfig signingConfigs.qaRelease
            manifestPlaceholders = [HOCKEYAPP_APP_ID: "1f1f1c3895e14c10adf42c6d2a15bc91"]
        }
        dev {
            applicationId = "com.elasalle.lamp.dev"
            buildConfigField "String", "BASE_URL", baseUrlQa
        }
    }
    buildTypes {
        debug {
            applicationIdSuffix ".debug"
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/DEPENDENCIES'
    }
    dexOptions {
        javaMaxHeapSize "4g"
    }
    dataBinding {
        enabled = true
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
}

repositories {
    maven {
        url "https://maven.google.com"
    }
    maven {
        url "http://dl.bintray.com/microsoftazuremobile/SDK"
    }
}

dependencies {
    compile project(':scanner')

    compile 'com.android.support:appcompat-v7:25.4.0'
    compile 'com.android.support:support-v4:25.4.0'
    compile 'com.android.support:cardview-v7:25.4.0'
    compile 'com.android.support:recyclerview-v7:25.4.0'
    compile 'com.android.support:design:25.4.0'
    compile 'com.android.support:multidex:1.0.1'
    compile 'com.google.android.gms:play-services-analytics:11.0.2'
    compile 'com.google.android.gms:play-services-location:11.0.2'
    compile 'com.google.android.gms:play-services-gcm:11.0.2'

    compile 'com.google.dagger:dagger:2.11'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.11'

    compile 'com.jakewharton:butterknife:8.7.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.7.0'
    compile 'com.squareup.retrofit2:retrofit:2.3.0'
    compile 'com.squareup.retrofit2:converter-jackson:2.3.0'
    compile 'joda-time:joda-time:2.9.9'
    compile 'commons-codec:commons-codec:1.10'
    compile 'org.apache.commons:commons-lang3:3.6'
    compile 'org.apache.maven:maven-artifact:3.5.0'
    compile 'org.apache.directory.studio:org.apache.commons.io:2.4'
    compile 'net.hockeyapp.android:HockeySDK:4.1.5'
    compile 'com.google.guava:guava:22.0-android'

    provided 'org.glassfish:javax.annotation:10.0-b28'

    compile 'com.microsoft.azure:azure-mobile-services-android-sdk:2.0.3'
    compile 'com.microsoft.azure:notification-hubs-android-sdk:0.4@aar'
    compile 'com.microsoft.azure:azure-notifications-handler:1.0.1@aar'

    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.5.1'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.1'
    testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.1'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.8.47'
    testCompile 'org.robolectric:robolectric:3.3.2'
    testCompile 'org.robolectric:shadows-multidex:3.3.2'
    testCompile 'org.apache.maven:maven-artifact:3.5.0'
    testCompile 'com.google.guava:guava:22.0-android'
    testCompile 'org.apache.commons:commons-lang3:3.6'
}

// Needs to be at the end of app/build.gradle file so that no dependency collisions are introduced
apply plugin: 'com.google.gms.google-services'

task downloadKeystore(type: KeystoreDownload) {
    src = System.getenv('BITRISEIO_ANDROID_KEYSTORE_URL') ?: ''
    dest = new File(buildDir.absolutePath, 'lamp.keystore')
}

tasks.whenTaskAdded{ theTask ->
    if(theTask.name.equals("packageProductionRelease")) {
        theTask.doLast {
            File keystore = new File(buildDir.absolutePath, 'lamp.keystore')
            if (keystore != null && keystore.exists()) {
                boolean isDeleted = keystore.delete();
                if (isDeleted) {
                    println('Deleted keystore...')
                } else {
                    println('Failed to delete keystore!')
                }
            } else {
                println('Keystore does not exist!')
            }
        }
    }
}

preBuild.dependsOn downloadKeystore

class KeystoreDownload extends DefaultTask {
    @Input String src
    @OutputFile File dest
    @TaskAction
    void download() {
        if (src != null && src.length() > 0) {
            StartParameter startParam = project.getGradle().getStartParameter()
            List<String> taskNames = startParam.getTaskNames()
            if (taskNames.contains(":app:assembleProductionRelease") ||
            taskNames.contains("assembleProductionRelease")) {
                println('Downloading keystore...')
                ant.get(src: src, dest: dest)
            } else {
                println('Skipping... This task only runs for task :app:assembleProductionRelease')
                println('List of tasks found:')
                for (String name : taskNames) {
                    println(name)
                }
            }
        }
    }
}
